# start minikube and execute this command to sync the host docker with minikube docker 'minikube -p minikube docker-env' and 'eval $(minikube -p minikube docker-env)'
========================================================================================================================
# create a configmap named fresco-config. add key SERVER_URL and value https://www.fresco.me

apiVersion: v1
kind: ConfigMap
metadata:
  name: fresco-config
  namespace: default
data:
  SERVER_URL: https://www.fresco.me

# varify if the configmap is created
kubectl get configmap fresco-config -n default
========================================================================================================================
# create an nginx pod with the environmental varialbe SERVER_URL_ENV. use the configmap created earlier, and assign the below values to it:
apiVersion: v1
kind: Pod
metadata:
  name: fresco-nginx-pod
  namespace: default
spec:
  containers:
  - name: nginx
    image: nginx
    env:
    - name: SERVER_URL_ENV
      valueFrom:
        configMapKeyRef:
          name: fresco-config
          key: SERVER_URL

# create the pod mentioned above
kubectl create -f main.yaml

# test your configuration by executing the below command:
kubectl exec -it fresco-nginx-pod -- sh -c env | grep SERVER_URL_ENV 

# it should return SERVER_URL_ENV=https://www.fresco.me
========================================================================================================================
# create a kubernetes secret with the following data
# name: "fresco-secret"
# username: "admin"
# password: "pass"
apiVersion: v1
kind: Secret
metadata:
  name: fresco-secret
  namespace: default
type: Opaque
data:
  username: YWRtaW4=
  password: cGFzcw==
========================================================================================================================
# modify the above nginx pod to add the fresco-secret and mountpath /etc/test
apiVersion: v1
kind: Pod
metadata:
  name: fresco-nginx-pod
  namespace: default
spec:
  containers:
  - name: nginx
    image: nginx
    env:
    - name: SERVER_URL_ENV
      valueFrom:
        configMapKeyRef:
          name: fresco-config
          key: SERVER_URL
    volumeMounts:
    - name: fresco-secret
      mountPath: /etc/test
      readOnly: true
    - name: fresco-config
      mountPath: /etc/test
      readOnly: true

# update the pod
kubectl apply -f main.yaml

# use this command to check if the pod and secret are successfully configured
kubectl exec -it fresco-nginx-pod -- sh -c "cat /etc/test/*" | base64 -d

# it should return the following:
# username: admin
# password: pass
========================================================================================================================
# create a persistent volume named fresco-pv using the following parameters
# storageClassName: "manual"
# capacity: 100mb
# accessModes: ["ReadWriteOnce"]
# hostPath: /tmp/fresco
apiVersion: v1
kind: PersistentVolume
metadata:
  name: fresco-pv
  namespace: default
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/fresco

# run the following command to create the persistent volume claim
kubectl create -f pvc.yaml

# check if the persistent volume is created
kubectl get persistentvolume fresco-pv -n default
========================================================================================================================
# create a pvc named fresco-pvc and request for 50MB. to verify successful creation, ensure it is bound to fresco-pv
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fresco-pvc
  namespace: default
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi

# update the pvc
kubectl apply -f pvc.yaml

# to verify successful creation
kubectl get pvc fresco-pvc -n default

# to ensure it is bound to fresco-pv, run the following command
kubectl get pvc -n default | grep fresco-pvc | awk '{print $3}' | grep Bound
========================================================================================================================
# modify above nginx pod named fresco-nginx-pod using the following parameters:
# request for fresco-pvc as a volume
# use /usr/share/nginx/html as the mount path
apiVersion: v1
kind: Pod
metadata:
  name: fresco-nginx-pod
  namespace: default
spec:
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: fresco-pvc
      mountPath: /usr/share/nginx/html
    - name: fresco-config
      mountPath: /etc/test
    - name: fresco-secret
      mountPath: /etc/test
  volumes:
  - name: fresco-pvc
    persistentVolumeClaim:
      claimName: fresco-pvc
  - name: fresco-config
    configMap:
      name: fresco-config
  - name: fresco-secret
    secret:
      secretName: fresco-secret

# update the pod
kubectl apply -f main.yaml

# **HINT** use the following command for debugging
kubectl describe pod fresco-nginx-pod
========================================================================================================================
# create a user 'emp' and assign 'read' rights on pods belonging to the namespace 'dev'
apiVersion: v1
kind: Role
metadata:
  name: emp
  namespace: dev
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

# create the role
kubectl create -f main.yaml
========================================================================================================================
# create a namespace named 'dev', use 'openssl' and create a private key named 'emp.key'
apiVersion: v1
kind: Namespace
metadata:
  name: dev
  labels:
    app: openssl

# create the namespace
kubectl create -f main.yaml

# create a private key named 'emp.key'
openssl genrsa -out emp.key 1024
========================================================================================================================
# create a certificate sign request named 'emp.csr' using the private key generated earlier. use the following information:
# name: emp
# group: dev
# generate 'emp.crt' by approving the request created earlier
apiVersion: v1
kind: CertificateSigningRequest
metadata:
  name: emp
  namespace: dev
spec:
  groups:
  - dev
  request: YWRtaW4=
  usages:
  - digital signature
  - key encipherment
  - client auth

# create the csr
kubectl create -f main.yaml

# generate 'emp.crt' by approving the request created earlier
kubectl certificate approve emp -n dev
========================================================================================================================
# create a role named 'emp-role' and assign 'get', 'list' access on 'pods' and 'deployments' (use 'dev' namespace)
# bind 'emp' to the role 'emp-role' created earlier and name it 'emp-bind'
apiVersion: v1
kind: Role
metadata:
  name: emp-role
  namespace: dev
rules:
- apiGroups: [""]
  resources: ["pods", "deployments"]
  verbs: ["get", "list"]

# create the role
kubectl create -f main.yaml

# run an 'nginx' pod under the 'dev-ctx' and 'dev' namespace and 'nginx' name
apiVersion: v1
kind: Pod
metadata:
  name: nginx
  namespace: dev
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80
    volumeMounts:
    - name: emp-cert
      mountPath: /etc/nginx/certs
    - name: emp-key
      mountPath: /etc/nginx/keys
  volumes:
  - name: emp-cert
    secret:
      secretName: emp-cert
  - name: emp-key
    secret:
      secretName: emp-key

# create the pod
kubectl create -f main.yaml

# execute 'kubectl --context dev-ctx get pods -o wide' and ensure it is deployed.
# if you try to execute 'kubectl --context dev-ctx get pods -n default' a forbidden error will be thrown, because only employees are authorized to access the 'dev' namespace
========================================================================================================================